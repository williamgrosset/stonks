services:
  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stonks_db
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres']
      interval: 10s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7
    container_name: redis_service
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: ['redis-server', '--save', '60', '1', '--loglevel', 'warning']
    networks:
      - internal_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      retries: 5
      start_period: 5s

  prisma-client:
    build:
      context: .
      dockerfile: ./prisma-client/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    environment:
      DATABASE_URL: 'postgresql://postgres:postgres@db:5432/stonks_db'
    networks:
      - internal_network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    restart: always
    ports:
      - '5001:80'
    depends_on:
      - user-service
      - transaction-service
      - order-service
    networks:
      - internal_network

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    container_name: user_service
    depends_on:
      prisma-client:
        condition: service_completed_successfully
    ports:
      - '3000:3000'
    environment:
      DATABASE_URL: 'postgresql://postgres:postgres@db:5432/stonks_db'
    networks:
      - internal_network
    labels:
      - 'prometheus.scrape=true'
      - 'prometheus.port=3000'
      - 'prometheus.path=/metrics'

  transaction-service:
    build:
      context: .
      dockerfile: ./transaction-service/Dockerfile
    container_name: transaction_service
    depends_on:
      prisma-client:
        condition: service_completed_successfully
    ports:
      - '3001:3001'
    environment:
      DATABASE_URL: 'postgresql://postgres:postgres@db:5432/stonks_db'
    networks:
      - internal_network

  order-service:
    build:
      context: .
      dockerfile: ./order-service/Dockerfile
    container_name: order_service
    depends_on:
      prisma-client:
        condition: service_completed_successfully
      matching-engine-service:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - '3002:3002'
    environment:
      DATABASE_URL: 'postgresql://postgres:postgres@db:5432/stonks_db'
      REDIS_URL: redis://redis:6379
    networks:
      - internal_network

  matching-engine-service:
    build:
      context: .
      dockerfile: ./matching-engine-service/Dockerfile
    container_name: matching_engine_service
    depends_on:
      transaction-service:
        condition: service_started
      redis:
        condition: service_healthy
    ports:
      - '3003:3003'
    environment:
      REDIS_URL: redis://redis:6379
    networks:
      - internal_network

  # Monitoring stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    restart: always
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - internal_network

  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    restart: always
    ports:
      - '3030:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: 'false'
    networks:
      - internal_network
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: node_exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - '9100:9100'
    networks:
      - internal_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  internal_network:
    driver: bridge
